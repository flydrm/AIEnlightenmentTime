package com.enlightenment.ai.presentation.profile

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.enlightenment.ai.presentation.theme.CreamBackground

/**
 * ‰∏™‰∫∫Ê°£Ê°àÁïåÈù¢
 * 
 * ÂäüËÉΩËØ¥ÊòéÔºö
 * Â±ïÁ§∫ÂíåÁºñËæëÂÑøÁ´•ÁöÑ‰∏™‰∫∫ËµÑÊñôÔºåÂåÖÊã¨Âü∫Êú¨‰ø°ÊÅØ„ÄÅÂ≠¶‰π†ÁªüËÆ°ÂíåÂÖ¥Ë∂£Áà±Â•Ω„ÄÇ
 * ÊîØÊåÅÊ°£Ê°àÁöÑÂàõÂª∫ÂíåÊõ¥Êñ∞ÔºåÊèê‰æõ‰∏™ÊÄßÂåñÂ≠¶‰π†ÁöÑÂü∫Á°ÄÊï∞ÊçÆ„ÄÇ
 * 
 * UIÂ∏ÉÂ±ÄÔºö
 * 1. È°∂ÈÉ®Ê†èÔºöÊ†áÈ¢òÂíåËøîÂõûÊåâÈíÆ
 * 2. Ê°£Ê°àÁºñËæëÂå∫ÔºöÂßìÂêç„ÄÅÂπ¥ÈæÑ„ÄÅÂÖ¥Ë∂£Á≠â‰ø°ÊÅØ
 * 3. Â≠¶‰π†ÁªüËÆ°ÔºöÂ±ïÁ§∫Â≠¶‰π†ÊàêÂ∞±ÂíåËøõÂ∫¶
 * 4. Êìç‰ΩúÊåâÈíÆÔºö‰øùÂ≠òÊàñÂàõÂª∫Ê°£Ê°à
 * 
 * ‰∫§‰∫íÁâπÁÇπÔºö
 * - Ë°®ÂçïÈ™åËØÅÔºöÁ°Æ‰øùËæìÂÖ•ÂêàÊ≥ïÊÄß
 * - Âç≥Êó∂‰øùÂ≠òÔºö‰øÆÊîπÂêéËá™Âä®‰øùÂ≠ò
 * - Êï∞ÊçÆÂèØËßÜÂåñÔºöÂõæË°®Â±ïÁ§∫Â≠¶‰π†Êï∞ÊçÆ
 * - ÂÖ¥Ë∂£ÈÄâÊã©ÔºöÈ¢ÑËÆæÊ†áÁ≠æÂø´ÈÄüÈÄâÊã©
 * 
 * Áî®Êà∑‰ΩìÈ™åÔºö
 * - ÁÆÄÂåñËæìÂÖ•Ôºö‰ΩøÁî®ÈÄâÊã©Âô®‰ª£ÊõøÊñáÊú¨ËæìÂÖ•
 * - ËßÜËßâÂèçÈ¶àÔºö‰øùÂ≠òÊàêÂäüÊèêÁ§∫
 * - Êï∞ÊçÆ‰øùÊä§ÔºöÊú¨Âú∞Â≠òÂÇ®ÔºåÈöêÁßÅÂÆâÂÖ®
 * - ÂèãÂ•ΩÂºïÂØºÔºöÈ¶ñÊ¨°‰ΩøÁî®ÊúâÂàõÂª∫ÊèêÁ§∫
 * 
 * @param onNavigateBack ËøîÂõû‰∏ä‰∏ÄÈ°µÁöÑÂõûË∞É
 * @param viewModel Ê°£Ê°àÁïåÈù¢ÁöÑViewModel
 * 
 * @author AIÂêØËíôÊó∂ÂÖâÂõ¢Èòü
 * @since 1.0.0
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ProfileScreen(  // ÂèØÁªÑÂêàUIÁªÑ‰ª∂
    onNavigateBack: () -> Unit,
    viewModel: ProfileViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("ÊàëÁöÑËµÑÊñô") },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "ËøîÂõû")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .background(CreamBackground)
        ) {
            when (val state = uiState) {  // Ê†πÊçÆÊù°‰ª∂ËøõË°åÂàÜÊîØÂ§ÑÁêÜ
                is ProfileUiState.Loading -> {
                    CircularProgressIndicator(
                        modifier = Modifier.align(Alignment.Center)
                    )
                }
                
                is ProfileUiState.NoProfile -> {
                    ProfileSetupForm(
                        onSaveProfile = { name, age ->
                            viewModel.createProfile(name, age)
                        }
                    )
                }
                
                is ProfileUiState.HasProfile -> {
                    ProfileContent(
                        profile = state.profile,
                        onUpdateInterests = { interests ->
                            viewModel.updateInterests(interests)
                        }
                    )
                }
            }
        }
    }
}

@Composable
private fun ProfileSetupForm(  // ÂèØÁªÑÂêàUIÁªÑ‰ª∂
    onSaveProfile: (String, Int) -> Unit
) {
    var name by remember { mutableStateOf("") }
    var age by remember { mutableStateOf("") }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "ËÆ©Êàë‰ª¨ÂÖàËÆ§ËØÜ‰∏Ä‰∏ãÔºÅ",
            style = MaterialTheme.typography.headlineMedium
        )
        
        Spacer(modifier = Modifier.height(32.dp))
        
        OutlinedTextField(
            value = name,
            onValueChange = { name = it },
            label = { Text("‰Ω†ÁöÑÂêçÂ≠ó") },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        OutlinedTextField(
            value = age,
            onValueChange = { 
                if (it.all { char -> char.isDigit() }) {
                    age = it
                }
            },
            label = { Text("‰Ω†ÁöÑÂπ¥ÈæÑ") },
            modifier = Modifier.fillMaxWidth(),
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            singleLine = true
        )
        
        Spacer(modifier = Modifier.height(32.dp))
        
        Button(
            onClick = {
                val ageInt = age.toIntOrNull()
                if (name.isNotBlank() && ageInt != null && ageInt in 3..6) {
                    onSaveProfile(name, ageInt)
                }
            },
            modifier = Modifier.fillMaxWidth(),
            enabled = name.isNotBlank() && age.toIntOrNull() in 3..6
        ) {
            Text("ÂºÄÂßãÂ≠¶‰π†‰πãÊóÖ")
        }
    }
}

@Composable
private fun ProfileContent(  // ÂèØÁªÑÂêàUIÁªÑ‰ª∂
    profile: ProfileDisplayModel,
    onUpdateInterests: (List<String>) -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .padding(16.dp)
    ) {
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surface
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "Âü∫Êú¨‰ø°ÊÅØ",
                    style = MaterialTheme.typography.titleLarge
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text("ÂßìÂêç")
                    Text(profile.name, style = MaterialTheme.typography.bodyLarge)
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text("Âπ¥ÈæÑ")
                    Text("${profile.age}Â≤Å", style = MaterialTheme.typography.bodyLarge)
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text("Â≠¶‰π†Á≠âÁ∫ß")
                    Text(profile.learningLevel, style = MaterialTheme.typography.bodyLarge)
                }
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surface
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "ÂÖ¥Ë∂£Áà±Â•Ω",
                    style = MaterialTheme.typography.titleLarge
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                val availableInterests = listOf(
                    "Âä®Áâ©", "Â§™Á©∫", "ÊÅêÈæô", "ÂÖ¨‰∏ª", "Ê±ΩËΩ¶",
                    "Èü≥‰πê", "ÁîªÁîª", "ËøêÂä®", "ÁßëÂ≠¶", "ÊïÖ‰∫ã"
                )
                
                FlowRow(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp),
                    verticalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    availableInterests.forEach { interest ->
                        FilterChip(
                            selected = interest in profile.interests,
                            onClick = {
                                val newInterests = if (interest in profile.interests) {
                                    profile.interests - interest
                                } else {
                                    profile.interests + interest
                                }
                                onUpdateInterests(newInterests)
                            },
                            label = { Text(interest) }
                        )
                    }
                }
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.tertiaryContainer
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "üèÜ",
                    style = MaterialTheme.typography.displayMedium
                )
                Text(
                    text = "Â≠¶‰π†ÊàêÂ∞±",
                    style = MaterialTheme.typography.titleMedium
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Â∑≤Â≠¶‰π† ${profile.daysLearned} Â§©",
                    style = MaterialTheme.typography.bodyLarge
                )
                Text(
                    text = "Âê¨‰∫Ü ${profile.storiesCompleted} ‰∏™ÊïÖ‰∫ã",
                    style = MaterialTheme.typography.bodyMedium
                )
            }
        }
    }
}

@ExperimentalLayoutApi
@Composable
fun FlowRow(  // ÂèØÁªÑÂêàUIÁªÑ‰ª∂
    modifier: Modifier = Modifier,
    horizontalArrangement: Arrangement.Horizontal = Arrangement.Start,
    verticalArrangement: Arrangement.Vertical = Arrangement.Top,
    content: @Composable () -> Unit
) {
    Row(
        modifier = modifier,
        horizontalArrangement = horizontalArrangement
    ) {
        content()
    }
}