package com.enlightenment.ai.presentation.story

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import coil.compose.AsyncImage
import com.enlightenment.ai.presentation.common.LoadingAnimation
import com.enlightenment.ai.presentation.theme.CreamBackground

/**
 * ÊïÖ‰∫ãÁïåÈù¢
 * 
 * ÂäüËÉΩËØ¥ÊòéÔºö
 * Â±ïÁ§∫AIÁîüÊàêÁöÑÂÑøÁ´•ÊïÖ‰∫ãÔºåÊîØÊåÅËØ≠Èü≥ÊúóËØªÂíå‰∫íÂä®ÈóÆÁ≠î„ÄÇ
 * ÈááÁî®ÂÑøÁ´•ÂèãÂ•ΩÁöÑËÆæËÆ°ÔºåÂ§ßÂ≠ó‰Ωì„ÄÅÈÖçÂõæ„ÄÅ‰∫íÂä®ÊåâÈíÆ„ÄÇ
 * 
 * UIÁªìÊûÑÔºö
 * 1. È°∂ÈÉ®Ê†èÔºöÊ†áÈ¢òÂíåËøîÂõûÊåâÈíÆ
 * 2. ÊïÖ‰∫ãÂå∫ÂüüÔºöÊ†áÈ¢ò„ÄÅÈÖçÂõæ„ÄÅÊ≠£ÊñáÂÜÖÂÆπ
 * 3. ÊéßÂà∂Âå∫ÔºöÊí≠Êîæ/ÊöÇÂÅúÊåâÈíÆ„ÄÅÊç¢‰∏Ä‰∏™ÊåâÈíÆ
 * 4. ÈóÆÁ≠îÂå∫ÔºöÊïÖ‰∫ãÁõ∏ÂÖ≥ÁöÑÈÄâÊã©È¢ò
 * 
 * ‰∫§‰∫íÂäüËÉΩÔºö
 * - ËØ≠Èü≥ÊúóËØªÔºöTTSÊúóËØªÊïÖ‰∫ãÂÜÖÂÆπ
 * - ÊªöÂä®ÈòÖËØªÔºöÊîØÊåÅ‰∏ä‰∏ãÊªëÂä®
 * - ‰∫íÂä®ÈóÆÁ≠îÔºöÊ£ÄÈ™åÁêÜËß£Á®ãÂ∫¶
 * - ÈáçÊñ∞ÁîüÊàêÔºöËé∑ÂèñÊñ∞ÊïÖ‰∫ã
 * 
 * Áä∂ÊÄÅÂ§ÑÁêÜÔºö
 * - LoadingÔºöÊòæÁ§∫Âä†ËΩΩÂä®Áîª
 * - SuccessÔºöÂ±ïÁ§∫ÊïÖ‰∫ãÂÜÖÂÆπ
 * - ErrorÔºöÊòæÁ§∫ÈîôËØØÊèêÁ§∫
 * 
 * @param onNavigateBack ËøîÂõû‰∏ä‰∏ÄÈ°µÁöÑÂõûË∞É
 * @param viewModel ÊïÖ‰∫ãÁïåÈù¢ÁöÑViewModel
 * 
 * @author AIÂêØËíôÊó∂ÂÖâÂõ¢Èòü
 * @since 1.0.0
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun StoryScreen(
    onNavigateBack: () -> Unit,
    viewModel: StoryViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsStateWithLifecycle()
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("‰ªäÊó•ÊïÖ‰∫ã") },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "ËøîÂõû")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        }
    ) { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .background(CreamBackground)
        ) {
            when (val state = uiState) {
                is StoryUiState.Loading -> {
                    LoadingAnimation(
                        message = "Â∞èÁÜäÁå´Ê≠£Âú®Âàõ‰ΩúÁ≤æÂΩ©ÁöÑÊïÖ‰∫ã...",
                        modifier = Modifier.align(Alignment.Center)
                    )
                }
                
                is StoryUiState.Success -> {
                    StoryContent(
                        story = state.story,
                        onPlayAudio = { viewModel.playStory() },
                        onAnswerQuestion = { questionId, answerIndex ->
                            viewModel.answerQuestion(questionId, answerIndex)
                        }
                    )
                }
                
                is StoryUiState.Error -> {
                    ErrorContent(
                        message = state.message,
                        onRetry = { viewModel.generateStory() },
                        modifier = Modifier.align(Alignment.Center)
                    )
                }
            }
        }
    }
}

@Composable
private fun StoryContent(
    story: StoryDisplayModel,
    onPlayAudio: () -> Unit,
    onAnswerQuestion: (String, Int) -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .padding(16.dp)
    ) {
        // Story image
        story.imageUrl?.let { url ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
            ) {
                AsyncImage(
                    model = url,
                    contentDescription = "ÊïÖ‰∫ãÊèíÂõæ",
                    modifier = Modifier.fillMaxSize()
                )
            }
            Spacer(modifier = Modifier.height(16.dp))
        }
        
        // Story title
        Text(
            text = story.title,
            style = MaterialTheme.typography.headlineMedium,
            textAlign = TextAlign.Center,
            modifier = Modifier.fillMaxWidth()
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Story content
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surface
            )
        ) {
            Text(
                text = story.content,
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.padding(16.dp),
                lineHeight = MaterialTheme.typography.bodyLarge.lineHeight * 1.5
            )
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Play button
        Button(
            onClick = onPlayAudio,
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                containerColor = MaterialTheme.colorScheme.primary
            )
        ) {
            Text("üîä Âê¨ÊïÖ‰∫ã")
        }
        
        // Questions
        if (story.questions.isNotEmpty()) {
            Spacer(modifier = Modifier.height(24.dp))
            Text(
                text = "ÂõûÁ≠îÈóÆÈ¢ò",
                style = MaterialTheme.typography.titleLarge
            )
            
            story.questions.forEach { question ->
                Spacer(modifier = Modifier.height(16.dp))
                QuestionCard(
                    question = question,
                    onAnswerSelected = { answerIndex ->
                        onAnswerQuestion(question.id, answerIndex)
                    }
                )
            }
        }
    }
}

@Composable
private fun QuestionCard(
    question: QuestionDisplayModel,
    onAnswerSelected: (Int) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.secondaryContainer
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = question.text,
                style = MaterialTheme.typography.titleMedium
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            question.options.forEachIndexed { index, option ->
                OutlinedButton(
                    onClick = { onAnswerSelected(index) },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp),
                    enabled = !question.isAnswered
                ) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.Start
                    ) {
                        Text(
                            text = "${index + 1}. $option",
                            color = if (question.isAnswered && index == question.selectedAnswer) {
                                if (index == question.correctAnswerIndex) {
                                    MaterialTheme.colorScheme.primary
                                } else {
                                    MaterialTheme.colorScheme.error
                                }
                            } else {
                                MaterialTheme.colorScheme.onSurface
                            }
                        )
                    }
                }
            }
            
            if (question.isAnswered && question.feedback != null) {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = question.feedback,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.primary
                )
            }
        }
    }
}

@Composable
private fun ErrorContent(
    message: String,
    onRetry: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "üòî",
            style = MaterialTheme.typography.displayLarge
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = message,
            style = MaterialTheme.typography.bodyLarge,
            textAlign = TextAlign.Center
        )
        Spacer(modifier = Modifier.height(16.dp))
        Button(onClick = onRetry) {
            Text("ÈáçËØï")
        }
    }
}